#!/usr/bin/env python
#-*- coding: utf8 -*-
'''
Background program to automatically create reflectivities from the most recent datasets.
It gets triggered by the reduce_REF_M script whenever there is a new file available.

If there is now instance running it will start one otherwise it will signal
the running instance about the new file and wait for an acknowledgement,
if this is not triggered the current instance will be killed and a new
one started.
'''

import logging
import os
import sys
from time import sleep

# if script was run from commandline
try:
  if os.path.abspath(__file__).endswith('scripts/autorefl'):
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
except NameError:
  pass

from quicknxs.console_logging import setup_logging
from quicknxs.auto_reflectivity import ReflectivityBuilder
from quicknxs.version import str_version

argv_options={
              # command line options, key is given on command line
              # value is: (name, type, default, description)
              '-i': ('start_index', int, None,
                     'first file number to be added to the database'),
              '-a': ('start_autorefl', int, None,
                     'file number used when starting auto reflectivity search'),
              '-v': ('log_level', int, logging.INFO,
                     'set verbosity (smaller is more verbose), default is INFO level of %i'%logging.INFO),
              }

def start_new_instance(index):
  '''
  Fork a new daemon process and start ReflectivityBuilder thread.
  '''
  setup_logging(log_level=logging.INFO)
  logging.info('*** QuickNXS AutoRefl %s Logging started ***'%str_version)

  rb=ReflectivityBuilder(index-10)
  rb.start()

  logging.info('*** QuickNXS AutoRefl %s Logging ended ***'%str_version)

if __name__=='__main__':
  opts=eval_argv(sys.argv[1:])

  
  rb=ReflectivityBuilder(opts['start_autorefl'])
  rb.start()

